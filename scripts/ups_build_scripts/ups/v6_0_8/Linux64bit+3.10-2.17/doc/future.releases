
  This is a list of the functionality which did not make it in to the first
version of the reconstructed UPS and needs to be added in a subsequent version.

1. Support wildcarding flavors e.g. : -f IRIX*

2. Allow versions of specified UPS required products to be a version number
        or greater, or a version range.

3. Provide support for a report generator, browsing tool etc. -
	- dependency tree tool
	- allow releases with no parents to be located
	- all reports have an option to be generated in html

4. When doing a declare, warn user if the UPS required products do not exist.

5. When creating the temp file, first define a function that undefined all
	the UPS local environment variables and removes the temp file.  Then
	before each return/exit point, call this function.

6. Allow specification in the dbconfig file of the order of the search path
	when looking for the table file (i.e.
	table_resorder=(database:product:ups:home)

7. Support the -B command line parameter.  This allows a user to override the
	information in the table file for a specific ups dependent product.
	For example - if a table file for product pearl had a line in it like -

	setupRequired("bobo v2_0")

	then the following command line would cause v1_0 of bobo to get set
	up, not v2_0 -


	setup pearl -B "bobo v1_0"

8. Write and debug 'ups parent' command.  This is the command which will
	list all the products that depend on the given instance.

9. Expand the functionality of the fileTest action.

10. Fully support news and html files more generally.

11. The ability for the upsdb-admin to configure, on a per-db level, what
	happens under various circumstances.  For example,
	in some later version of ups the sys/prod-admin should be able to say
	things like "when a product is declared, copy the html files to
	such-a-spot in such-a-format based on some admin-defined naming
	hierarchy" or "if a product goes current, send mail to
	prodadmin@here.there" or "when somebody sets up a test version of a
	product, prepend the MAN_SOURCE_DIR into their MAN_PATH so that they
	can access the man pages for the test version", etc. This would mean
	supporting actions in the dbconfig file.

12. Let declared files be the umask and ownership of the database in which
	they currently reside.

13. Implement the -x option.

14. Allow ups to be distributed as a uu encoded shell script.

15. Implement a command line interface for ups modify.

16. support flow control (if tests) in actions

17. allow automatic unsetting up of a compiled product to automatically
	prepend an 'un' to the script name and optionally run that script.

18. think about implementing QUALIFIERS=ANY in the table file.

19. Core problem: the permissions on the "configure" and "current"
	scripts do not include "execute" permissions, and therefore 
	"upd install" isn't configuring the product properly.

	This is precisely the type of systematic error that we had in
	old-style products, where the developer would forget to add execute
	permissions to various scripts.  UPS and/or UPD should get the
	brains to fix this bug by ensuring that all scripts which are
	executed via the table file have execute permissions set.

        - do we need a separate "executeScript" function to distinguish
          shell commands from scripts?
        - should ups check for execute permission before it executes
          the script?  (Should it try to set execute permission?)
        - and/or should upd read through the table file and SET
          execute permission on all the scripts it encounters?

	This isn't an immediate need, but it's the kind of systematic bug we
	ran into in the past, where the brains to fix it should be at a
	higher level.

20. DESCRIPTION: should be available as a local variable in the table
   file.  You should be able to
   
        action=describe
          execute("echo ${UPS_DESCRIPTION}")

   as a user-defined command.
   
   [*all* keywords should be available within
   the table files, for symmetry and ease of documentation.  "If it's
   a keyword, you have access to it (spelled with a leading UPS_)
   as a local variable in the table file].

21. The compile keyword UPS_COMPILE should be split into UPS_COMPILE_DIR and
	UPS_COMPILE_FILE.  The product developer would have control over the
	file one and the installer over the dir one. they should be able to
	be set something like -
     COMPILE_FILE=${UPS_PROD_NAME}_${UPS_PROD_VERSION}.setup-compiled
  
22. Provide a text version of the RELEASE_NOTES

23. Add an INSTALL_NOTE to the top level.

