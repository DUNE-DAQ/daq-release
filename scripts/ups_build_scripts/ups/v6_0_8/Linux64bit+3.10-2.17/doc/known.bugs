Leaving off, or inserting space in front of, the closing brace in a
${UPS_KEYWORD} gives confusing error messages and goes into a hard loop
or logs out.
  ERROR: Unable to translate or evaluate 'EnvSet (SLAP_UPS_VERBOSE, ${UPS_VERBOSE)'
  ksh: SLAP_UPS_VERBOSE="${UPS_VERBOSE }": The specified substitution is not valid for this command.

In configure actions (at least when called by a declare?) <prod>_DIR
seems to only have the relative path.  This confounds perl installs.

sourceReqCheck is slightly broken.  It attempts to use a 'return 1' statement
when there's an error, which works for the wrong reasons, and produces the
message "sh: Cannot perform a return when not in function mode."  Same problem
occurs with fileCheck.

There are many small dysfunctions with the ups modify command.  When multiple
chains are specified, none of the product files are listed, and an error
message is printed about needing a unique instance, but only after 'quit' is
selected from the menu.  If you instead choose to edit one of the offered
dbconfig files, the unique instance error message won't be displayed, but the
version file will be verified in the pre-modification pass.  For an unchained
instance modify lists the version file, but doesn't allow the table file to be
modified.

Some ups commands (current, verify, user-defined actions) on non-existent
products should result in an error, but presently 'succeed' quietly.  E.g.,
'ups current xyzzy'

User defined variables in group stanzas get lost.  They should override
those in the common stanza.

There are occasional "duplicate instance" messages, perhaps due to hash table
overflows.

Some platforms produce annoying error messages when sourcing /dev/null.

Setup -P looks in databases, and stops in the middle without one.

Fix problem removing string from CLASSPATH with semicolon as delimiter.

Appending to a previously undefined path/variable string yields
"<path_or_variable_name>: Undefined variable." warning in t/csh.
