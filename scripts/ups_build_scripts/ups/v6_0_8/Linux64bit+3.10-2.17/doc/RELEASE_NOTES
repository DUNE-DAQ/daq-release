Changes made in the v4_9_7 release of ups:

    * improve setup -B check
    * fix bug in declare when using version directory
    * fix chain file declare problem
    * report an error when product name is required but not specified

Changes made in the v4_9_6 release of ups:

    * new ups active command

Changes made in the v4_7_1 release of ups:

    * adds setups.py
    * return code of ups matches return code from actions
	(i.e. if ups some_action product has an action of "false"
	ups exits with an exit code of 1...)
    * UPS_REQ_CHAIN -- requested chain

Changes made in the v4_7 release of ups:

    * ups flavor -4
    * finalizes extended flavor matching
    * finalizes improved qualifier matching
    * adds setups.pl
    * UPS_REQ_QUALIFIER -- requested qualifier

    Extended Flavor Matching

      This new flavor matching extension assumes backwards compatability for
      operating systems, and also adds "ups flavor -4".  If a component of a 
      flavor is numeric, it is counted down numerically to find compatable 
      packages, so under the old scheme you would use for a Linux system we 
      would try flavors:
	Linux+2.4.9-2
	Linux+2.4
	Linux+2
	Linux
	NULL
      In the new scheme we would try:
	Linux+2.4.9-2
	Linux+2.4.9-1
	Linux+2.4.9-0
	Linux+2.4.9
	Linux+2.4.8
	Linux+2.4.7
	Linux+2.4.6
	Linux+2.4.5
	Linux+2.4.4
	Linux+2.4.3
	Linux+2.4.2
	Linux+2.4.1
	Linux+2.4.0
	Linux+2.4
	Linux+2.3
	Linux+2.2
	Linux+2.1
	Linux+2.0
	Linux+2
	Linux+1
	Linux+0

    Improved Qualifier Matching

       Under the new system qualifiers default to being optional (and can
       be made mandatory with a '+' sign.)  Also, a new variable for table
       files has been provided ${UPS_REQ_QUALIFIERS}, which is the list of
       requested qualifiers, as distinct from those that matched.   This
       allows you to pass requested qualifiers down to dependant products
       in table files -- so if your table file for product "foo" looks like:

       Action=setup
	 SetupRequired(bar -q "${UPS_REQ_QUALIFIERS}")
	 SetupRequired(baz -q "${UPS_REQ_QUALIFIERS}")

      and you do a "ups depend foo -q apple:orange", and bar has an "apple"
      qualifier, and baz has an "orange" qualifier, and foo has none, you
      will get a depenency like:

	   foo v1_0 -f NULL -g current
	   |__bar v1_0 -f NULL -q apple -g current
	   |__baz v1_0 -f NULL -q orange -g current

      This sort of arrangement makes dealing with various qualifiers of 
      dependency hierarchies much easier to manage.

    setups.pl

      This is perhaps best described with an example:

	#!/usr/bin/env perl
	require "/usr/local/etc/setups.pl";

	# make sure we're using the right ups version of perl
	ups::use_perl("v5_005a");

	print @INC;

	# make sure we have dependant products available before using
	# them
	ups::setup("pgp");
	ups::setup("xemacs v20_4");

	print "PGP_DIR is ", $::ENV{PGP_DIR}, "\n";
	    print "XEMACS_DIR is ", $::ENV{XEMACS_DIR}, "\n";

	    ups::setup("xemacs v21_1");

	    print "XEMACS_DIR is ", $::ENV{XEMACS_DIR}, "\n";



Changes made in the v4_6 release of ups (2001-08-26): 

  * ups table file actions extended -- added:
	If( command )
	  ...
	Else()
	  ...
	EndIf( command )
     and
	Unless( command )
	  ...
	Else()
	  ...
	EndUnless( command )
    where the two commands *must* match.  

  * ${UPS_UPS_DIR} is now defined when a ${UPS_PROD_DIR}/ups directory 
    exists, even if is not otherwise declared in the database or command
    line.

  * The list of flavors that will be tried for matching a product has
    been expanded.  Previous to this release, on a Linux+2.4.whatever host
    we would have tried to match flavors:
        Linux+2.4.whatever
 	Linux+2.4
 	Linux+2
 	Linux
	NULL
    The list is now expanded to attempt to guess previous releases:
        Linux+2.4.whatever
 	Linux+2.4
 	Linux+2.4
 	Linux+2.3
 	Linux+2.2
 	Linux+2.1
 	Linux+2.0
 	Linux+2
 	Linux+1
 	Linux+0
 	Linux
	NULL
    Where we simply count down if the last character of a sub-flavor
    is a digit.

Changes made in the v4_5_4 release of ups (2000-10-06): 

* corrects some problems with ups parent
* Fixes setups.sh and setups.csh problems on Linux+2.4
* fixes crashes if UPS_OVERRIDE is incorrectly set

Changes made in the v4_5_3 release of ups (2000-10-06): 

Added "ups parent" command, which takes the same options as "ups list".  
Users should note it is rather slow, and stacking multiple
products on one command line saves time, i.e.
	ups parent perl, python
is twice as fast as
	ups parent perl
	ups parent python

Added support for UPS_OVERRIDE environment variable, so you can
set UPS_OVERRIDE to "-H IRIX+6.5.1" (or whatever flavor is
appropriate)  to change ups's mind about the local flavor of
the system.

Added code in setups.{csh,sh} to read ${SETUPS_DIR}/ups_override.${Node}
(where ${Node} is the not-qualified hostname), if it's present, 
 and set the UPS_OVERRIDE variable mentioned above, so that you 
can create that file and globally change ups's mind about the 
default flavors on that system.

Changes to the configure script to deal with read-only clones in AFS                space for $SETUPS_DIR

Table file actions PathPrepend() PathAppend() and PathSet() now are
based on EnvPrepend() EnvAppend() and EnvSet(), which corrects
several bugs fixed in one but not the other.

Fixed a bug causing a core dump if commands were issued with several
optional qualifiers and no mandatory ones.

Changes made in the v4_5_2 release of ups (2000-06-02):

Added a check in undeclare for the -C switch to inhibit un<chain> actions.
Removed the "unnew" line from the test/scripts/undeclare/log/spot2.in test
log file because undeclare -C is working properly now.

Fixed the problem in which an unsetup would do none of the actions from
an exeActionRequired/Optional reference.  That is, an unsetup with
  Action=unsetup
    exeActionRequired (do_something)
  Action=do_something
    someFunction () ...
would incorrectly not do any someFunction entries.  This was fixed by
copying the p_act_item->unsetup flag to the new_act_item structure
created in the next_cmd routine when handling exeActionRequired/Optional.

Fixed the problem in upsact.c which caused crashes in user-defined
actions with setupRequired/Optional functions including setup options
when a flavor was specified on the command line.  For example, a
user-defined action with the line 'setupRequired (-j <prod>)' would
crash if used with a command line like 'ups user-action -H flavor'.

Added handling of the -e, -j and -v options in unsetupRequired/Optional
functions for previously setup products.  All other options are ignored.
This allows the use of 'unsetupRequired (-j <prod>)' in an unsetup
action with the expected results.  Previously, all options were ignored,
and only the options recorded in the SETUP_<prod> string were used.

Fixed the parsing of the SETUP_<prod> variable during unsetups to
properly handle quoted strings, like the value of the -O options.  This
allows the use of a line like 'exeActionRequired (do_${UPS_OPTIONS})'
in a setup action, without causing errors at unsetup time due to having
an unexpected pair of quotes around the ${UPS_OPTIONS} value.

Dropped the recording of a -v in SETUP_<prod> environment variables.
Unsetups, especially automatic ones, will proceed quietly unless -v is
used on the command line or in unsetupRequired/Optional calls.

Added statistics file logging for dependent products.  The last string
in the record will now indicate whether setupRequired or setupOptional
was used, and what top-level product was responsible:
  "Z" "z1" "NULL" "" "" "user" "2000-05-09 22.19.37 GMT" "setuprequired A a1"
Also fixed the null action string in ups_main.c's statistics logging for
user-defined actions.

Removed the touch of the product directory and archive file, and added
the -f option to the deletion of the archive file in the ups_undeclare.c
file.  Cygwin doesn't allow touching directories, and the touches are
superfluous with the -f, which was already on the product directory
removal.  Cleaned up the clean-up code in the test/scripts/upstst_declare
script to use rm -rf and no touch.

Added status checking and error handling to the code in upsfil.c which
removes the journal and chain files (for undeclares).  Added the
UPS_REMOVE_FILE error message for these checks.

Fixed the 'clean' targets in the doc and man directory Makefiles to not
remove the files necessary for man ups and ups -? to work.  This problem
was introduced in the v4_5 changes to the Makefiles.

Turned on keyword substitution in the handling of ${ARCHIVE_FILE}, as 
an aid in making relocatable ups distributions on CDs, et cetera.

Added the @ form of the COMPILE_FILE keyword to the list -K command.

Removed the a option from and added the chain options (c, d, n, o, t) 
to the modify command.

Added the product name to the verbose "Skipping (un)configure/current ..."
message text in the ups_(un)declare modules.

Added status checking after calls to upsfil_write_file in ups_(un)declare.

Added some spaces after semicolons in shell commands for readability.

Removed the 'ups' alias definition from the ups table file.



Changes made in the v4_5_1 release of ups (2000-02-17):

Changed the umask setting during temporary file creation to have group
and world write access disabled, instead of all access enabled.  Fixed
the final chmod to not allow group or world write access either.

Fixed the problem in the Bourne shell with defining aliases which end
with an ampersand.

Added a test for the sourceCompileOpt and sourceCompileReq routines to
prevent attempts to delete /dev/null.

Inhibited the attempt to report the unknown command name from errors
encountered when executing the temporary file.  This happens when user-
defined actions use commands like FileTest and there's an error.

Fixed the ups/dbconfig.template file's definition of PROD_DIR_PREFIX
to include the prd subdirectory; commented out the definition of
INFO_TARGET_DIR which is unimplemented still.




Changes made in the v4_5 release of ups (1999-12-17):

Added tests of the -C option to inhibit executing unchain actions in the
declare and undeclare routines.  Reworked the code some to emit -v messages
when -C causes actions to be skipped.  Added a "free" to match the "malloc"
for the unchain in ups_declare.c

Added code to override the -j option setting saved in the SETUP_prod
environment variable when unsetting up a product either directly or
indirectly by setting up a previously set up product.  This prevents a
dependent product's getting set up twice without an intervening unsetup in
situations like the following:  Product A has Product B as a dependent
product.  Product B is setup.  Product A is setup with the -j option.
Setting up Product A unsets up A with the -j from the SETUP_A environment
variable, failing to unsetup B, but going on to set it up again.

Made the upsutl_finish_up routine return an error status if a problem
occurs, most likely in calls to the upsfil_flush routine.  This prevents ups
from exiting with a success code when a declare fails, due to file
permission problems for example, which in turn confuses upd.

Mapped the appropriate [un]declare action's option list to the various
[un]chain actions in the get_ugo routine for its call to upsugo_bldcmd, and
fixed the upsugo_next routine crash if we get null for the valid_option
list.  These changes allow table files to have setupRequired/Optional
actions in chain stanzas (current, development, etc.) and not have ups crash
when called with -H, as upd is wont to do.

Changed the upsget_remall and upsget_allout routines in upsget.c to use the
g_var_subs table to write environment variables to the temporary file.  The
initial motivation for this was to make a generic fix to crashes caused by
attempts to use UPS_ENV in actions when no database is available, and hence
some of the environment variables have null values.  The other motivation is
that is makes it easier to add items to the list to be written to the
temporary file, and eliminates some redundant code.  The upsget_allout and
upsget_envout routines now use apostrophes for quoting values, rather than
quote marks, which fixes the problem when defining SETUP_<something> with an
-O "some options" string embedded in it.  All environment variables are now
quoted, and the formatting is a little easier to look at.

Fixed the cat/man page copy code in upscpy.c to not get confused by dots
occuring in directories or in product names (like kadmin.local, e.g.).
Fixed the code to properly handle .z, .gz, and .Z extensions.  It now also
accepts most any subsection letter (but not g, z, or Z).

Moved the UPSCPY informational messages from level 0 to level 1, meaning
that the user will have to use -v with declare to see the long list of
"UPSCPY: Copying man files" and similar messages.  This change has the happy
side-effect of clearing up much clutter in the testing process.

Defined the UPS_UPS_DIR variable if UPS_ENV is specified, in upsget.c.

Fixed the handling of the DB alias for the DATABASE keyword, so that ups
list -KDB works.

Enabled the -R option for the setup command.

Added a ups(1) man page.

Changed the command index passed to upsutl_finish_up by main to e_help if
help is requested.  This prevents a spurious /dev/null from being echoed for
ups -?, ups setup -?, and ups unsetup -? commands.

Option list clean-up items in upsact.c:
  - Removed dead options A:b:CD:O:p:r:T:u:U:V from the list for touch.
  - Removed all instances of the B: option, for now at least.
  - Removed the : from the e options.
  - Removed all instances of the h: option.
  - Removed options K:l from the list for verify.
  - Removed misleading options m:M: from the list for touch.
  - Removed option o from the list for modify.
  - Removed option V from the lists for declare, get, list and verify.
  - Removed option x, which will never be implemented.
  - Removed most items from the option list for help.
  - Made the ordering of the option lists consistent.


Test case clean-up and other changes:
  - Changed the get (get3.in, get4.in, relchk.in) and action routine
    (fly1.in and fly2.in) test input files to reflect the changes
    in the quoting of environment variables in upsget.c.
  - Made the /dev/null output in the action (oregano.in) test disappear.
  - Added numerous real and bogus cat/man files (spot) to copy and ignore.
  - Doctored the declare test list (tostuff.in) to match the newly added
    cat/man files.
  - Made the blank line output in the depend test disappear (bee4.in).
  - Returned to using the lp account for tilde expansion checks in get
    (get1.in and get2.in).
  - Added UPS_UPS_DIR to get test output (get3.in, get4.in, relchk.in).
  - Added code to sort the undeclare action list (spot3.in), since it
    depends on file system order otherwise.

Eliminated the old [un]setup.[c]sh scripts.

Code clean-up items to eliminate compiler warnings:
  - Large number of void casts added to printf's, strcpy's, etc.
  - Added zero comparisons in some if, while, and ?: statements
  - Added the macro SHUTUP and routine shutup to pretend to use
    standardized parameters
  - Eliminated some empty else clauses
  - Moved some return statements to the bottom of the routine
  - Removed some unused parameters
  - Fixed the widening of some unsigned chars
  - Defined some missing prototypes, fix some function declarations
  - Added initializers to some declarations
  - Changed some NULL initializers to 0s
  - Fixed some "unreachable" breaks in switches

Makefile clean-up items:
  - Added man and ups to the clean and spotless actions in the main Makefile
  - Merged spotless and clean targets, where they are the same
  - Made spotless depend on clean targets, where they differ
  - Cleaned up lots of files so that 'make spotless' returns the directory
    tree to its initial state, in the doc, man, and test Makefiles.
