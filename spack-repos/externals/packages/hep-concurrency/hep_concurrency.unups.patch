diff --git a/CMakeLists.txt b/CMakeLists.txt
index 465b10b..71749f8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,19 +12,13 @@
 #  make package (builds distribution tarfile)
 # ======================================================================
 
+cmake_minimum_required(VERSION 3.11...3.14 FATAL_ERROR)
 
-# ----------------------------------------------------------------------
-# Describe build tool requirements:
-
-cmake_minimum_required(VERSION 2.8)  # use cmake 2.8 or later
-
-# ----------------------------------------------------------------------
-# Describe product:
-
-project(hep_concurrency)
+# Project information.
+project(hep_concurrency VERSION 1.03.03 LANGUAGES CXX)
 
-# cetbuildtools contains our cmake modules
-find_package(cetbuildtools REQUIRED)
+# cetmodules contains our cmake modules
+find_package(cetmodules 1.01.01 REQUIRED)
 
 include(CetCMakeEnv)
 cet_cmake_env()
@@ -36,65 +30,16 @@ cet_set_compiler_flags(DIAGS VIGILANT
   EXTRA_CXX_FLAGS -Wnon-virtual-dtor -Wdelete-non-virtual-dtor
   )
 
-if($ENV{CET_SANITIZE_ADDRESS})
-  #message(STATUS "CET_SANITIZE_ADDRESS=$ENV{CET_SANITIZE_ADDRESS}")
-  if(NOT "$ENV{GCC_FQ_DIR}" STREQUAL "")
-    #message(STATUS "GCC_FQ_DIR=$ENV{GCC_FQ_DIR}")
-    find_file(ASAN_LIB libasan.so NO_DEFAULT_PATH PATHS $ENV{GCC_FQ_DIR}/lib64)
-    if(NOT ASAN_LIB STREQUAL "ASAN_LIB-NOTFOUND")
-      #message(STATUS "ASAN_LIB=${ASAN_LIB}")
-    endif()
-  endif()
-endif()
-
-if($ENV{CET_SANITIZE_THREAD})
-  #message(STATUS "CET_SANITIZE_THREAD=$ENV{CET_SANITIZE_THREAD}")
-  if(NOT "$ENV{GCC_FQ_DIR}" STREQUAL "")
-    #message(STATUS "GCC_FQ_DIR=$ENV{GCC_FQ_DIR}")
-    find_file(TSAN_LIB libtsan.so NO_DEFAULT_PATH PATHS $ENV{GCC_FQ_DIR}/lib64)
-    if(NOT TSAN_LIB STREQUAL "TSAN_LIB-NOTFOUND")
-      #message(STATUS "TSAN_LIB=${TSAN_LIB}")
-    endif()
-  endif()
-endif()
-
-if ($ENV{CET_SANITIZE_ADDRESS})
-cet_add_compiler_flags(CXX -fsanitize=address)
-cet_add_compiler_flags(C -fsanitize=address)
-set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=address")
-set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -fsanitize=address")
-set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -fsanitize=address")
-endif()
-
-if ($ENV{CET_SANITIZE_THREAD})
-cet_add_compiler_flags(CXX -fsanitize=thread -D__SANITIZE_THREAD__)
-cet_add_compiler_flags(C -fsanitize=thread -D__SANITIZE_THREAD__)
-set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-endif()
-
 cet_report_compiler_flags()
 
 # ----------------------------------------------------------------------
 # Describe build prerequisites:
 
-find_ups_product(cppunit)
-find_ups_product(tbb)
-
-# define cppunit
-cet_find_library(CPPUNIT NAMES cppunit   PATHS ENV CPPUNIT_LIB   NO_DEFAULT_PATH)
-
+cet_find_library(CPPUNIT NAMES cppunit REQUIRED)
+find_package(TBB)
+cet_find_library(TBB NAMES tbb REQUIRED)
 # ----------------------------------------------------------------------
 # Describe source tree layout:
 
 add_subdirectory(${PROJECT_NAME})  # source code
-add_subdirectory(ups)              # ups files
-
-# ----------------------------------------------------------------------
-# Packaging utility
-
-include(UseCPack)
-
-#
-# ======================================================================
+cet_cmake_config()
