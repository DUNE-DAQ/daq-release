name: Nightly workflow

on:
  schedule:
    - cron: "0 5 * * *"

  workflow_dispatch:
    inputs:
      tag-prefix:
        description: 'nightly tag prefix'
        default: ''

jobs:
  bulid_the_develop_release:
    name: ${{ matrix.os_name }}_build_dev_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: "dunedaq/sl7-minimal:cvmfs"
            os_name: "c7"
          - image: "dunedaq/c8-minimal:cvmfs"
            os_name: "c8"
    container:
      image: ${{ matrix.image }}
    env:
      DBT_AREA_FILE: "dbt-settings"
    defaults:
      run:
        shell: bash

    steps:
    - name: Start the CI
      run: echo "Start the CI anyway ${{ github.event.inputs.name }}"

    - name: Checkout daq-release
      uses: actions/checkout@v3
      with:
        repository: DUNE-DAQ/daq-release
        path: daq-release
        
    - name: setup dev area and checkout code
      run: |
          source /cvmfs/dunedaq.opensciencegrid.org/setup_dunedaq.sh
          setup_dbt latest || true
          dbt-create.py -r $GITHUB_WORKSPACE/daq-release/configs dunedaq-develop dev-${{ matrix.os_name }}
          cd dev-${{ matrix.os_name }}
          cp $GITHUB_WORKSPACE/daq-release/configs/dunedaq-develop/release_manifest.sh .
          $GITHUB_WORKSPACE/daq-release/scripts/checkout-package.sh -f ./release_manifest.sh -a -o sourcecode
    
    - name: setup build env and build the dev release
      run: |
          cd $GITHUB_WORKSPACE/dev-${{ matrix.os_name }}
          source dbt-env.sh
          dbt-workarea-env -s externals || true
          dbt-build.py

    - name: create release directory
      run: |
          nightly_tag="N${{ github.event.inputs.tag-prefix }}$(date +%y-%m-%d)"
          [[ ${{ matrix.os_name }} == "c8" ]] && nightly_tag="${nightly_tag}-cs8"
          nightly_workdir="/cvmfs/dunedaq-development.opensciencegrid.org/nightly"
          mkdir -p ${nightly_workdir}/${nightly_tag}
          
          cd $GITHUB_WORKSPACE/dev-${{ matrix.os_name }}
          source dbt-env.sh
          dbt-workarea-env -s externals || true
          setup clang v7_0_0rc3 || true

          $GITHUB_WORKSPACE/daq-release/scripts/create-ups-products-area.sh -t ${nightly_workdir}/${nightly_tag}/packages
          cp $GITHUB_WORKSPACE/daq-release/configs/dunedaq-develop/dbt-build-order.cmake ${nightly_workdir}/${nightly_tag}
          cp $GITHUB_WORKSPACE/daq-release/configs/dunedaq-develop/pyvenv_requirements.txt ${nightly_workdir}/${nightly_tag}
          clonevirtualenv.py $GITHUB_WORKSPACE/dev-${{ matrix.os_name }}/dbt-pyvenv ${nightly_workdir}/${nightly_tag}/dbt-pyvenv
          $GITHUB_WORKSPACE/daq-release/scripts/upsify-daq-pkgs.py -w $GITHUB_WORKSPACE/dev-${{ matrix.os_name }} -c ${{ matrix.os_name }} -i -o ${nightly_workdir}/${nightly_tag}/packages
          echo "PROGRESS: created ups products for DAQ packages."
          echo "PROGRESS: updating dbt-settings.sh"
          cd ${nightly_workdir}/${nightly_tag}/packages
          cp $GITHUB_WORKSPACE/daq-release/configs/dunedaq-develop/dbt-settings.sh ${DBT_AREA_ROOT}/${DBT_AREA_FILE}
          echo " dune_daqpackages=(" >> ${DBT_AREA_ROOT}/${DBT_AREA_FILE}
          find . -type d -name "*.version"|grep -v ups|sed 's/\.\//"/g'|sed 's/\.version/ e19:prof\"/g'|tr '/' ' '>> ${DBT_AREA_ROOT}/${DBT_AREA_FILE}
          echo ")">> ${DBT_AREA_ROOT}/${DBT_AREA_FILE}
          
          sed -i 's,dunedaq-develop,'"$nightly_tag"',' ${DBT_AREA_ROOT}/${DBT_AREA_FILE}
          sed -i 's,.*dunedaq.open.*,    "/cvmfs/dunedaq-development.opensciencegrid.org/nightly/'"$nightly_tag"'/externals",' ${DBT_AREA_ROOT}/${DBT_AREA_FILE}
          sed -i 's,.*open.*products.*,    "/cvmfs/dunedaq-development.opensciencegrid.org/nightly/'"$nightly_tag"'/packages",' ${DBT_AREA_ROOT}/${DBT_AREA_FILE}

          # prepare external dir 
          $GITHUB_WORKSPACE/daq-release/scripts/create-ups-links.sh ${nightly_workdir}/${nightly_tag}/externals
          
          mv ${DBT_AREA_ROOT}/${DBT_AREA_FILE} ${nightly_workdir}/${nightly_tag}/dbt-settings.sh
          cd ${nightly_workdir}
          tar zcf dunedaq-${nightly_tag}.tar.gz ${nightly_tag}
          mkdir -p $GITHUB_WORKSPACE/nightly-${{ matrix.os_name }}
          mv dunedaq-${nightly_tag}.tar.gz $GITHUB_WORKSPACE/nightly-${{ matrix.os_name }}

    - name: upload nightly tarball
      uses: actions/upload-artifact@v3
      with:
        name: nightly_release_${{ matrix.os_name }}
        path: ${{ github.workspace }}/nightly-${{ matrix.os_name }}

    - name: upload build log file
      uses: actions/upload-artifact@v3
      with:
        name: build_log_${{ matrix.os_name }}
        path: ${{ github.workspace }}/dev-${{ matrix.os_name }}/log

  update_image:
    name: ${{ matrix.os_name }}_update_image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: "dunedaq/sl7-minimal"
            os_name: "c7"
          - image: "dunedaq/c8-minimal"
            os_name: "c8"
    needs: bulid_the_develop_release
    environment: dockerhub
    permissions:
      packages: write
      contents: read

    steps:
      - name: Download nightly release tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: nightly_release_${{ matrix.os_name }}
          path: ${{ github.workspace }}/docker-build-${{ matrix.os_name }}

      - name: prepare cvmfs mirror
        run: |
            cd ${{ github.workspace }}/docker-build-${{ matrix.os_name }}
            mkdir -p nightly
            nightly_tag="N${{ github.event.inputs.tag-prefix }}$(date +%y-%m-%d)"
            last_link="last_successful"
            [[ ${{ matrix.os_name }} == "c8" ]] && nightly_tag="${nightly_tag}-cs8"
            [[ ${{ matrix.os_name }} == "c8" ]] && last_link="${last_link}_cs8"
            image_name="${{ matrix.image }}:cvmfs"
            cd nightly
            tar xvf ../dunedaq-*.tar.gz
            ln -s N*-??-??* $last_link
            cd ..
            echo "FROM ${image_name}"> Dockerfile
            echo 'MAINTAINER Pengfei Ding "dingpf@fnal.gov"' >> Dockerfile
            echo "ENV REFRESHED_AT ${nightly_tag}" >> Dockerfile
            echo "ADD nightly /cvmfs/dunedaq-development.opensciencegrid.org/nightly" >> Dockerfile
            echo 'ENTRYPOINT ["/bin/bash"]' >> Dockerfile

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ matrix.image }}
          tags: |
            type=raw,value=dev

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/docker-build-${{ matrix.os_name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
