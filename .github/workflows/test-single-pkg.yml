name: Test Single Pkg Workflow

on:
  workflow_dispatch:
    inputs:
      pkg-name:
        description: 'single packge CI'
        default: 'appfwk'

jobs:

  build_single_pkg:
    name: build single pkg
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: "ghcr.io/dune-daq/sl7-spack:latest"
            os_name: "c7"

    steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3

    - name: change dir permission
      run: |
        sudo chmod -R go+rwx /var/lib/cvmfs

    - name: Cache cvmfs cache
      id: cvmfs_cache
      uses: actions/cache@v3
      with:
        path: /var/lib/cvmfs/shared
        key: cachecvmfs

    - name: restore dir permission
      run: |
        echo "JCF, Jul-8-2024: for the time being this Workflow is deprecated" && false
        sudo chown -R cvmfs.cvmfs /var/lib/cvmfs
        sudo chmod -R go-rwx /var/lib/cvmfs

    - name: Checkout pkg
      uses: actions/checkout@v4
      with:
        repository: DUNE-DAQ/${{ github.event.inputs.pkg-name }}
        path: scratch/sourcecode/${{ github.event.inputs.pkg-name }}

    - name: start docker container with bind mount cvmfs
      run: |

        cd $GITHUB_WORKSPACE/scratch
        cat << EOT > build_pkg.sh
        #!/bin/bash
        
        cd /scratch
        source /cvmfs/dunedaq.opensciencegrid.org/tools/dbt/latest/env.sh
        dbt-create -n last_fddaq dev-${{ matrix.os_name }}
        cd dev-${{ matrix.os_name }}
        source env.sh || true
        spack unload ${{ github.event.inputs.pkg-name }} || true
        mv /scratch/sourcecode/* sourcecode
        dbt-build --lint
        dbt-workarea-env
        EOT
        chmod +x build_pkg.sh

        docker run --rm -v /cvmfs:/cvmfs:shared -v $GITHUB_WORKSPACE/scratch:/scratch ghcr.io/dune-daq/sl7-spack:latest /scratch/build_pkg.sh

    - name: upload build log file
      uses: actions/upload-artifact@v3
      with:
        name: spack_build_log_${{ matrix.os_name }}
        path: ${{ github.workspace }}/scratch/dev-${{ matrix.os_name }}/log/build*.log

    - name: upload linter output file
      uses: actions/upload-artifact@v3
      with:
        name: spack_linting_log_${{ matrix.os_name }}
        path: ${{ github.workspace }}/scratch/dev-${{ matrix.os_name }}/log/linting*

    - name: change dir permission again
      run: |
        sudo chmod -R go+rwx /var/lib/cvmfs

  make_nightly_tag:
    name: create nightly tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create_nightly_tag.outputs.nightly_tag }} 
    defaults:
      run:
        shell: bash
    steps:
      - id: create_nightly_tag
        run: |
          date_tag=$(date +%y-%m-%d)
          echo "nightly_tag=NAFD${date_tag}"  >>  "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"

  build_single_pkg_on_ubuntu:
    name: build single pkg on ubuntu
    runs-on: ubuntu-latest
    needs: make_nightly_tag
    defaults:
      run:
        shell: bash

    steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3

    - name: change dir permission
      run: |
        sudo chmod -R go+rwx /var/lib/cvmfs

    - name: install build-essential
      run: |
        sudo apt update
        sudo apt-get install -y build-essential gcc-multilib g++-multilib
        cd $GITHUB_WORKSPACE
        cat << EOT > ubuntu-lib64.sh
        #!/bin/bash
        cd /usr/lib64
        for i in \$(ls /usr/lib/x86_64-linux-gnu/)
        do
            if [[ "\$i" != "ld-linux"* ]]; then
                ln -s /usr/lib/x86_64-linux-gnu/\$i .
            fi
        done
        EOT
        chmod +x ubuntu-lib64.sh

        sudo $GITHUB_WORKSPACE/ubuntu-lib64.sh
        #ls -l /usr/lib64
        sudo apt-get install -y openssh-server
        ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa <<<y >/dev/null 2>&1
        cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys
        chmod 600 ~/.ssh/authorized_keys
        sudo systemctl status ssh

    - name: Cache cvmfs cache
      id: cvmfs_cache
      uses: actions/cache@v3
      with:
        path: /var/lib/cvmfs/shared
        key: cachecvmfs

    - name: restore dir permission
      run: |
        sudo chown -R cvmfs.cvmfs /var/lib/cvmfs
        sudo chmod -R go-rwx /var/lib/cvmfs
    - uses: cvmfs-contrib/github-action-cvmfs@v3

    - name: Checkout pkg
      uses: actions/checkout@v4
      with:
        repository: DUNE-DAQ/${{ github.event.inputs.pkg-name }}
        path: scratch/sourcecode/${{ github.event.inputs.pkg-name }}

    - name: Checkout daqsystemtest
      uses: actions/checkout@v4
      with:
        repository: DUNE-DAQ/daqsystemtest
        path: daqsystemtest
    

    - name: build pkg
      env:
        NIGHTLY_TAG: ${{needs.make_nightly_tag.outputs.tag}}
      run: |
        cd $GITHUB_WORKSPACE/scratch
        source /cvmfs/dunedaq.opensciencegrid.org/tools/dbt/latest/env.sh
        dbt-create -n NFD23-10-05 dev-ubuntu
        #dbt-create -c -n $NIGHTLY_TAG dev-ubuntu
        cd dev-ubuntu
        mv $GITHUB_WORKSPACE/scratch/sourcecode/* sourcecode
        sed -i '7 i set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS TRUE)' sourcecode/CMakeLists.txt
        source env.sh || true
        dbt-build
        dbt-workarea-env
        rm -f $GITHUB_WORKSPACE/test-results.xml
        pytest --junit-xml=$GITHUB_WORKSPACE/test-results.xml $GITHUB_WORKSPACE/daqsystemtest/integtest/small_footprint_quick_test.py
        #pytest --junit-xml=$GITHUB_WORKSPACE/test-results.xml $GITHUB_WORKSPACE/daqsystemtest/integtest/minimal_system_quick_test.py

    - name: Surface failing tests
      if: always()
      uses: pmeier/pytest-results-action@8104ed7b3d3ba4bb0d550e406fc26aa756630fcc
      with:
        path: ${{ github.workspace }}/test-results.xml
        summary: true
        display-options: fEX
        fail-on-empty: true
