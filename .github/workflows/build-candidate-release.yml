name: Build candidate release

on:

  workflow_dispatch:
    inputs:
      release:
        description: 'targeted release (one of subdirs under daq-release/configs)'
        required: true 
      release-tag:
        description: 'candidate release name, e.g. rc-dunedaq-v3.0.0-1'
        required: true 

jobs:
  build_the_candidate_release_spack:
    name: build_candidate_release_spack
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dune-daq/sl7-slim-externals:latest
      volumes:
        - pypi-repo:/cvmfs/dunedaq.opensciencegrid.org/pypi-repo
    services:
      cvmfs:
        image: ghcr.io/dune-daq/pypi-repo:latest
        volumes:
          - pypi-repo:/cvmfs/dunedaq.opensciencegrid.org/pypi-repo
    defaults:
      run:
        shell: bash

    steps:
    - name: Start the CI
      run: echo "Start the CI anyway ${{ github.event.inputs.name }}"

    - name: Checkout daq-release
      uses: actions/checkout@v3
      with:
        repository: DUNE-DAQ/daq-release
        path: daq-release
        
    - name: setup directories and install spack
      run: |
          export SPACK_VERSION="0.17.1"
          export DAQ_RELEASE=${{ github.event.inputs.release }}
          export RC_RELEASE=${{ github.event.inputs.release-tag }}

          export SPACK_RELEASE=/cvmfs/dunedaq-development.opensciencegrid.org/candidate-releases
          export SPACK_EXTERNALS=/cvmfs/dunedaq.opensciencegrid.org/spack-externals
          export SPACK_TAR="v${SPACK_VERSION}.tar.gz"
          rm -rf ${SPACK_RELEASE}/${RC_RELEASE}
          mkdir -p ${SPACK_RELEASE}/${RC_RELEASE}
          cd ${SPACK_RELEASE}/${RC_RELEASE}
          wget https://github.com/spack/spack/archive/refs/tags/${SPACK_TAR}
          tar xf $SPACK_TAR
          ln -s spack-${SPACK_VERSION} spack-installation
          rm -f $SPACK_TAR
          
          source $SPACK_EXTERNALS/spack-0.17.1/share/spack/setup-env.sh
          spack load py-pyyaml@5.3.1
          
          export DAQ_RELEASE_DIR=$GITHUB_WORKSPACE/daq-release
          
          cd $DAQ_RELEASE_DIR
          
          python3 scripts/spack/make-release-repo.py -u \
          	-i configs/${DAQ_RELEASE}/${DAQ_RELEASE}.yaml \
          	-t spack-repos/release-repo-template \
          	-r ${RC_RELEASE} \
          	-o ${SPACK_RELEASE}/${RC_RELEASE}

          cd $SPACK_RELEASE/$RC_RELEASE
          source spack-0.17.1/share/spack/setup-env.sh
          spack repo add $SPACK_EXTERNALS/spack-repo-externals
          
          cat <<EOT > $SPACK_ROOT/etc/spack/defaults/repos.yaml
          repos:
            - ${SPACK_RELEASE}/${RC_RELEASE}/spack-repo
            - ${SPACK_EXTERNALS}/spack-repo-externals
            - \$spack/var/spack/repos/builtin
          EOT
          
          spack repo list
          
          # adding externals spack instance as an upstream
          
          cat <<EOT > $SPACK_ROOT/etc/spack/defaults/upstreams.yaml
          upstreams:
            spack-externals:
              install_tree: ${SPACK_EXTERNALS}/spack-0.17.1/opt/spack
          EOT
          
          cp $SPACK_EXTERNALS/spack-0.17.1/etc/spack/defaults/linux/compilers.yaml \
          	$SPACK_RELEASE/$RC_RELEASE/spack-${SPACK_VERSION}/etc/spack/defaults/linux/
          # verify the compilers have been added
          spack compiler list
          
          # modify the installation prefix for spack packages
          # here we simply copy over the same settings as the externals instance
          # use "\cp" as in RHEL, "cp" is an alias of "cp -i"; "\cp" will do "unalias".
          \cp $SPACK_EXTERNALS/spack-0.17.1/etc/spack/defaults/config.yaml  $SPACK_RELEASE/$RC_RELEASE/spack-${SPACK_VERSION}/etc/spack/defaults/config.yaml
          sed -i 's/rpath/runpath/g' $SPACK_RELEASE/$RC_RELEASE/spack-${SPACK_VERSION}/etc/spack/defaults/config.yaml
          
          spack spec --reuse dunedaq@${RC_RELEASE}%gcc@8.2.0 | tee $SPACK_RELEASE/$RC_RELEASE/spec_dunedaq_log.txt
          spack install --reuse dunedaq@${RC_RELEASE}%gcc@8.2.0
          
          # spack does not allow env names contain any dots 
          export DUNEDAQ_SPACK_ENV=${RC_RELEASE//./-}
          spack env create $DUNEDAQ_SPACK_ENV
          spack env activate $DUNEDAQ_SPACK_ENV -p
          
          # add the release umbrella package to the spack environment
          spack add systems@${RC_RELEASE}%gcc@8.2.0
          spack add dunedaq@${RC_RELEASE}%gcc@8.2.0
          spack add llvm@13.0.0%gcc@8.2.0
          spack add gcc@9.4.0%gcc@8.2.0
          spack add cppcheck@2.1%gcc@8.2.0
          
          # run spack concretize to ensure the concretizer gets a successfully result before installation
          spack concretize --reuse | tee  $SPACK_RELEASE/$RC_RELEASE/concretizer_log.txt || true
          
          # install the release
          spack install || true

          spack load dunedaq@${RC_RELEASE}
          $DAQ_RELEASE_DIR/scripts/spack/make-release-repo.py -o  $GITHUB_WORKSPACE --pyvenv-requirements -i $DAQ_RELEASE_DIR/configs/${DAQ_RELEASE}/${DAQ_RELEASE}.yaml
          python -m venv dbt-pyvenv
          source dbt-pyvenv/bin/activate
          python -m pip install -r $GITHUB_WORKSPACE/pyvenv_requirements.txt

          spack clean -a
          spack env deactivate
          spack clean -a
          
          cp $GITHUB_WORKSPACE/pyvenv_requirements.txt $SPACK_RELEASE/$RC_RELEASE
          cp $DAQ_RELEASE_DIR/configs/${DAQ_RELEASE}/dbt-build-order.cmake $SPACK_RELEASE/$RC_RELEASE
          cd $SPACK_RELEASE
          tar zcf ${RC_RELEASE}.tar.gz ${RC_RELEASE}
          mkdir -p $GITHUB_WORKSPACE/candidate-releases
          mv ${RC_RELEASE}.tar.gz $GITHUB_WORKSPACE/candidate-releases

    - name: upload candidate release  tarball
      uses: actions/upload-artifact@v3
      with:
        name: candidate_release
        path: ${{ github.workspace }}/candidate-releases

  update_spack_image:
    name: ${{ matrix.os_name }}_update_spack_image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: "ghcr.io/dune-daq/sl7-externals"
            dockerimage: "dunedaq/sl7-minimal"
            os_name: "c7"
          - image: "ghcr.io/dune-daq/c8-externals"
            dockerimage: "dunedaq/c8-minimal"
            os_name: "c8"
    needs: build_the_candidate_release_spack
    environment: dockerhub
    permissions:
      packages: write
      contents: read

    steps:
      - name: Download spack candidate release tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: candidate_release
          path: ${{ github.workspace }}/docker-build

      - name: prepare cvmfs mirror for candidate release
        run: |
            cd ${{ github.workspace }}/docker-build
            mkdir -p candidate-releases
            RC_RELEASE=${{ github.event.inputs.release-tag }}
            image_name="${{ matrix.image }}:latest"
            cd candidate-releases
            tar xvf ../${RC_RELEASE}.tar.gz
            cd ..
            echo "FROM ${image_name}"> Dockerfile
            echo 'MAINTAINER Pengfei Ding "dingpf@fnal.gov"' >> Dockerfile
            echo "ENV CANDIDATE_RELEASE ${RC_RELEASE}" >> Dockerfile
            echo "ADD candidate-releases /cvmfs/dunedaq-development.opensciencegrid.org/candidate-releases" >> Dockerfile
            echo 'ENTRYPOINT ["/bin/bash"]' >> Dockerfile

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ matrix.image }}
          tags: |
            type=raw,value=spack-candidate-release

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/docker-build
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  generate_dbt_setup_release_env:
    name: generate_dbt_setup_release_env_${{ matrix.os_name }}
    runs-on: ubuntu-latest
    needs: update_spack_image
    container:
      image: "dunedaq/sl7-minimal:spack-candidate-release"
    defaults:
      run:
        shell: bash

    steps:
    
    - name: create dbt-setup-release-env.sh and daq_app_rte.sh
      run: |
          export RC_RELEASE=${{ github.event.inputs.release-tag }}
          source /cvmfs/dunedaq.opensciencegrid.org/setup_dunedaq.sh
          setup_dbt latest|| true
          dbt-setup-release -b candidate ${RC_RELEASE}
          declare -x > ${GITHUB_WORKSPACE}/dbt-setup-release-env.sh
          declare -f >> ${GITHUB_WORKSPACE}/dbt-setup-release-env.sh
          egrep "declare -x (PATH|.*_SHARE|CET_PLUGIN_PATH|DUNEDAQ_SHARE_PATH|LD_LIBRARY_PATH)=" ${GITHUB_WORKSPACE}/dbt-setup-release-env.sh > ${GITHUB_WORKSPACE}/daq_app_rte.sh

    - name: upload dbt-setup-release-env.sh
      uses: actions/upload-artifact@v3
      with:
        name: dbt_setup_release_env
        path: ${{ github.workspace }}/dbt-setup-release-env.sh

    - name: upload daq_app_rte.sh
      uses: actions/upload-artifact@v3
      with:
        name: daq_app_rte
        path: ${{ github.workspace }}/daq_app_rte.sh
