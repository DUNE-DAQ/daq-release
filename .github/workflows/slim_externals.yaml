name: Build docker image with slim externals

on:
  workflow_dispatch:
    inputs:
      tag-suffix:
        description: 'optional suffix for test-only externals image (e.g., T would mean alma9-slim-externals:v2.1T)'
        default: ''
      account-to-copy:
        description: 'the user account whose /cvmfs_dunedaq area you want to copy (default github)'
        default: 'github'

jobs:

  build_alma9_externals:
    name: build_al9_initial
    runs-on: dune-github
    permissions:
      packages: write
      contents: read
    env:
        IMAGE_NAME: alma9-slim-externals
        IMAGE_TAG: v2.1
        USERNAME: dune-daq
        REGISTRY: ghcr.io
        #BUILD_DIR: /home/${{ github.event.inputs.account-to-copy }}/cvmfs_dunedaq
        #WORK_DIR: /home/github/github-runner/dune-github/_work/
        #BUILD_DIR: ./ # /tmp
    steps:
      - name: Intro
        run: |
          echo "Will create a ghcr.io/dune-daq/alma9-slim-externals:v2.1${{ github.event.inputs.tag-suffix }} image"
          echo "Image contents will include $HOSTNAME:/home/${{ github.event.inputs.account-to-copy }}/cvmfs_dunedaq/spack/externals/ext-v2.1"

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME}}
          tags: |
            type=raw,value=${{ env.IMAGE_TAG }}${{ github.event.inputs.tag-suffix }}-initial
      
      - name: prepare build dir
        id: prep_build_dir
        run: |
          cd ${{ runner.temp }}
          echo "Using dir: ${{ runner.temp }}"
          echo "pwd: $(pwd)"
          refresh_date=$(date +%y-%m-%d)
          echo "FROM ghcr.io/dune-daq/alma9-spack:latest" > Containerfile
          echo 'MAINTAINER John Freeman "jcfree@fnal.gov"' >> Containerfile
          echo "ENV REFRESHED_AT $refresh_date" >> Containerfile
          #echo "ADD /home/github/github-runner/dune-github/_work/cvmfs_dunedaq/spack/externals/ext-v2.1 /cvmfs/dunedaq.opensciencegrid.org/spack/externals/ext-v2.1" >> Containerfile
          #echo "RUN source /cvmfs/dunedaq.opensciencegrid.org/spack/externals/ext-v2.1/spack-0.20.0/share/spack/setup-env.sh && spack uninstall -y llvm" >> Containerfile
          #echo "ADD tools /cvmfs/dunedaq.opensciencegrid.org/tools" >> Containerfile
          #echo "ADD setup_dunedaq.sh /cvmfs/dunedaq.opensciencegrid.org/setup_dunedaq.sh" >> Containerfile
          echo "ADD pypi-repo /cvmfs/dunedaq.opensciencegrid.org/pypi-repo" >> Containerfile
          echo 'ENTRYPOINT ["/bin/bash"]' >> Containerfile
          #mv Containerfile ${{ runner.temp }}
          cp -r /home/github/cvmfs_dunedaq/*  ${{ runner.temp }}

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          context: ${{ runner.temp }}
          image: ${{ env.IMAGE_NAME }}
          tags: test
          extra-args: |
            --layers=true
          containerfiles: |
            ${{ runner.temp }}/Containerfile

      - name: Push to GitHub Container Repository
        id: push_to_ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.REGISTRY }}/${{ env.USERNAME }}

      - name: Clean up Podman cache
        if: always()
        run: |
            podman image prune -f
            podman container prune -f
            podman network prune -f
            podman volume prune -f

  build_alma9_slim_externals:
    name: build_alma9
    runs-on: dune-github
    needs: build_alma9_externals
    permissions:
      packages: write
      contents: read
    steps:    
      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME}}
          tags: |
            type=raw,value=${{ env.IMAGE_TAG }}${{ github.event.inputs.tag-suffix }}-initial

      - name: prepare build dir
        run: |
          build_dir="${{ github.workspace }}/podman-build"
          mkdir -p $build_dir
          cd $build_dir
          refresh_date=$(date +%y-%m-%d)
          echo "FROM ghcr.io/dune-daq/alma9-spack:latest" > Containerfile
          echo 'MAINTAINER John Freeman "jcfree@fnal.gov"' >> Containerfile
          echo "ENV REFRESHED_AT $refresh_date" >> Containerfile
          echo "COPY --from=ghcr.io/dune-daq/alma9-slim-externals:v2.1${{ github.event.inputs.tag-suffix }}-initial /cvmfs/dunedaq.opensciencegrid.org/spack /cvmfs/dunedaq.opensciencegrid.org/spack" >> Containerfile
          echo "COPY --from=ghcr.io/dune-daq/alma9-slim-externals:v2.1${{ github.event.inputs.tag-suffix }}-initial /cvmfs/dunedaq.opensciencegrid.org/tools /cvmfs/dunedaq.opensciencegrid.org/tools" >> Containerfile
          echo "COPY --from=ghcr.io/dune-daq/alma9-slim-externals:v2.1${{ github.event.inputs.tag-suffix }}-initial /cvmfs/dunedaq.opensciencegrid.org/setup_dunedaq.sh /cvmfs/dunedaq.opensciencegrid.org/setup_dunedaq.sh" >> Containerfile
          echo "COPY --from=ghcr.io/dune-daq/alma9-slim-externals:v2.1${{ github.event.inputs.tag-suffix }}-initial /cvmfs/dunedaq.opensciencegrid.org/pypi-repo /cvmfs/dunedaq.opensciencegrid.org/pypi-repo" >> Containerfile
          echo 'ENTRYPOINT ["/bin/bash"]' >> Containerfile

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          context: $build_dir
          image: alma9-slim-externals
          tags: test
          containerfiles: |
            ./Containerfile

      - name: Push to GitHub Container Repository
        id: push_to_ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.REGISTRY }}/${{ env.USERNAME}}
