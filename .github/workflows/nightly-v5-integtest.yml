name: Nightly v5 integration tests

on:
  schedule:
    - cron: "15 9 * * *"


  workflow_dispatch:


jobs:
  make_nightly_tag:
    name: create nightly tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create_nightly_tag.outputs.nightly_tag }} 
    defaults:
      run:
        shell: bash
    steps:
      - id: create_nightly_tag
        run: |
          date_tag=$(date +%y%m%d)
          echo "nightly_tag=NFD_DEV_${date_tag}_A9"  >>  "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"

  integration_tests:
    name: integration_tests
    runs-on: daq
    timeout-minutes: 30
    needs: make_nightly_tag
    strategy:
        fail-fast: false
        matrix:
            test_name: ["listrev"]
    defaults:
      run:
        shell: bash

    steps:

    - name: Checkout listrev
      uses: actions/checkout@v4
      with:
        repository: DUNE-DAQ/listrev
        ref: amogan/intentional_integtest_failure
        path: listrev
    
    - name: setup release and run tests
      env:
        NIGHTLY_TAG: ${{needs.make_nightly_tag.outputs.tag}}
      run: |
          DET=fd
          mkdir -p $GITHUB_WORKSPACE/integration_tests_$NIGHTLY_TAG
          cd $GITHUB_WORKSPACE/integration_tests_$NIGHTLY_TAG
          source /cvmfs/dunedaq.opensciencegrid.org/setup_dunedaq.sh
          setup_dbt latest_v5
          [[ -e /cvmfs/dunedaq-development.opensciencegrid.org/nightly/$NIGHTLY_TAG/daq_app_rte.sh ]]
          dbt-setup-release -n $NIGHTLY_TAG
          export DBT_INSTALL_DIR=/cvmfs/dunedaq-development.opensciencegrid.org/nightly/$NIGHTLY_TAG
          pytest -v -s --junit-xml=${{ matrix.test_name }}_test_results.xml \
                 /home/nfs/amogan/listrev_intentional_failure/sourcecode/listrev/integtest/listrev_test.py

  #$LISTREV_SHARE/integtest/listrev_test.py
  parse_results:
    runs-on: daq
    if: always()
    needs: [make_nightly_tag, integration_tests]
    steps:
    - name: Surface failing tests
      #uses: pmeier/pytest-results-action@8104ed7b3d3ba4bb0d550e406fc26aa756630fcc
      uses: andrewmogan/pytest-results-action@1158583ebac3346e36d76969902bc1fa7b925270
      env:
        NIGHTLY_TAG: ${{ needs.make_nightly_tag.outputs.tag}}
      with:
        path: ${{ github.workspace }}/integration_tests_${{ env.NIGHTLY_TAG }}/*_test_results.xml
        summary: true
        display-options: fEX
        fail-on-empty: true

  cleanup_xml_files:
    runs-on: daq
    if: always()
    needs: [make_nightly_tag, parse_results]
    steps:
      - name: Remove xml files
        env:
          NIGHTLY_TAG: ${{ needs.make_nightly_tag.outputs.tag }}
        run: |
          rm -rf ${{ github.workspace }}/integration_tests_${{ env.NIGHTLY_TAG }}

  # Integration tests can sometimes collide with stale processes, leading to timeout
  cleanup_stale_gunicorn_processes:
    runs-on: daq
    if: always()
    needs: integration_tests
    steps:
      - name: Run cleanup script
        run: |
          /home/nfs/dunedaq/kill_stale_gunicorn_processes.sh

  send_slack_message:
    if: failure()
    runs-on: daq
    name: send slack message
    needs: integration_tests
    steps:
    - name: Send custom JSON data to Slack workflow
      id: slack
      uses: slackapi/slack-github-action@v1.27.0
      with:
        # For posting a rich message using Block Kit
        payload: |
          {
            "text": "!!!GitHub Action Failure!!!",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "The GitHub Action ${{ github.workflow }} has failed! For more information, see ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK